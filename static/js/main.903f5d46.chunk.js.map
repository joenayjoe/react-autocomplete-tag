{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["props","useState","newTag","setNewTag","selectedAutoSuggestIndex","setSelectedAutoSuggestIndex","typedTag","setTypedTag","TagAutoSuggestions","klass","styles","key","idx","className","onMouseEnter","onClick","t","addTag","SelectedTags","tag_item","tag_text","tag_close","autoSuggestionContainer","tag_autosuggestions","React","selectedTagContainer","selected_tags","selected_tag_list","tagInput","type","tag_input","placeholder","value","onChange","e","handleValueChange","onKeyDown","delimiters","s","handleKeyPress","autocomplete_tag","tag_container","App","tagList","tags","setTags","suggestions","setSuggestions","onAddHandler","val","onDeleteHandler","splice","removeTag","onChangeHandler","length","new_sug","forEach","includes","push","handleTagChange","ReactDOM","render","document","getElementById"],"mappings":"ycAckD,SAACA,G,MACrBC,mBAAQ,IAA7BC,OAAQC,O,EAIXF,oBAAQ,GAFVG,OACAC,O,EAE8BJ,mBAAQ,IAAjCK,OAAUC,OAQXC,EAAqBR,EAAA,iBAAsB,cAC/C,IAAIS,EAAQC,EAAZ,gBAMA,OAJIN,IAAJ,IACEK,EAAQA,MAAcC,EAAtBD,uBAIA,wBACEE,IAAKC,EACLC,UAAWJ,EACXK,aAAc,kBAAMT,EAAN,KAEd,yBAAKU,QAAS,kBAnBL,SAACH,GACd,IAAMI,EAAIhB,cAAV,GACAA,kBACAG,MAgBwBc,CAAN,KANlB,OAWIC,EAAelB,EAAA,UAAe,cAClC,OACE,wBAAIW,IAAKC,EAAKC,UAAWH,EAAOS,UAC9B,0BAAMN,UAAWH,EAAOU,UAD1B,GAEE,0BACEP,UAAWH,EAAOW,UAClBN,QAAS,kBAAMf,kBAAN,KALf,YAsDIsB,EAA0BtB,qBAC9B,yBAAKa,UAAWH,EAAOa,qBACrBC,4BAF4BxB,IAAhC,KAMMyB,EAAuBzB,EAAA,YAC3B,yBAAKa,UAAWH,EAAOgB,eACrB,wBAAIb,UAAWH,EAAOiB,mBAFG,IAA7B,KAMMC,EACJ,2BACEC,KAAK,OACLhB,UAAWH,EAAOoB,UAClBC,YAAa/B,cAAoBA,EAApBA,YAAwC,cACrDgC,MAAO9B,EACP+B,SAAU,mBA3DY,SAACC,GACzB,IAAMlB,EAAIkB,SAAV,MACA/B,KACAI,KACAP,mBAAyBA,kBAAzBA,GAuDmBmC,CAAP,IACVC,UAAW,mBArDQ,SAACF,GAItB,IAH2BlC,aACvBA,EADuBA,WAEvB,CAAC,IAFL,UAGIqC,SAAoBH,EAApBG,MAAJ,KAAkCnC,EAChCgC,mBACAlC,kBACAG,UACK,CACL,IAAMmC,EAAN,EAEA,YAAIJ,OACF,IAAII,GACFjC,EAA4BL,qBAA5BK,GACAF,EAAUH,cAAkBA,qBAA5BG,KACK,IAAImC,GACTjC,MACAF,OAEAE,EAA4BiC,EAA5BjC,GACAF,EAAUH,cAAkBsC,EAA5BnC,KAEG,cAAI+B,QACLI,IAAMtC,qBAAV,GACEK,MACAF,OAEAE,EAA4BiC,EAA5BjC,GACAF,EAAUH,cAAkBsC,EAA5BnC,OAyBcoC,CAAP,MAGf,OACE,yBAAK1B,UAAWH,EAAO8B,kBACrB,yBAAK3B,UAAWH,EAAO+B,eAAvB,EADF,GADF,IClEaC,G,MApDH,WACV,IAAMC,EAAoB,CACxB,UACA,YACA,SACA,aACA,QACA,QACA,QACA,UACA,SAVc,EAYM1C,mBAAmB,IAZzB,mBAYX2C,EAZW,KAYLC,EAZK,OAcsB5C,mBAAmB,IAdzC,mBAcT6C,EAdS,KAcIC,EAdJ,KAyChB,OACE,kBAAC,EAAD,CACEH,KAAMA,EACNE,YAAaA,EACbE,aAAc,SAACC,GAAD,OA7BH,SAACA,GACdJ,EAAQ,GAAD,mBAAKD,GAAL,CAAWK,KAClBF,EAAe,IA2BkB9B,CAAOgC,IACtCC,gBAAiB,SAACtC,GAAD,OAzBH,SAACA,GACjB,IAAII,EAAC,YAAO4B,GACZ5B,EAAEmC,OAAOvC,EAAK,GACdiC,EAAQ7B,GAsB4BoC,CAAUxC,IAC5CyC,gBAAiB,SAACJ,GAAD,OApBG,SAACA,GACvB,GAAIA,EAAIK,OAAS,EAAG,CAClB,IAAIC,EAAoB,GACxBZ,EAAQa,SAAQ,SAACxC,GACXA,EAAEyC,SAASR,IACbM,EAAQG,KAAK1C,MAGjB+B,EAAeQ,QAEfR,EAAe,IAUmBY,CAAgBV,QC9CxDW,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.903f5d46.chunk.js","sourcesContent":["import React, { useState, ChangeEvent } from 'react'\n\nimport styles from './styles.module.css'\n\ninterface IProp {\n  tags: string[]\n  suggestions: string[]\n  placeholder?: string\n  delimeters?: string[]\n  onAddHandler: (tag: string) => void\n  onDeleteHandler: (idx: number) => void\n  onChangeHandler?: (text: string) => void\n}\n\nconst ReactTags: React.FunctionComponent<IProp> = (props) => {\n  const [newTag, setNewTag] = useState<string>('')\n  const [\n    selectedAutoSuggestIndex,\n    setSelectedAutoSuggestIndex\n  ] = useState<number>(-1)\n  const [typedTag, setTypedTag] = useState<string>('')\n\n  const addTag = (idx: number) => {\n    const t = props.suggestions[idx]\n    props.onAddHandler(t)\n    setNewTag('')\n  }\n\n  const TagAutoSuggestions = props.suggestions.map((sug, idx) => {\n    var klass = styles.suggestion_item\n\n    if (selectedAutoSuggestIndex === idx) {\n      klass = klass + ' ' + styles.suggestion_item_hover\n    }\n\n    return (\n      <li\n        key={idx}\n        className={klass}\n        onMouseEnter={() => setSelectedAutoSuggestIndex(idx)}\n      >\n        <div onClick={() => addTag(idx)}>{sug}</div>\n      </li>\n    )\n  })\n\n  const SelectedTags = props.tags.map((tag, idx) => {\n    return (\n      <li key={idx} className={styles.tag_item}>\n        <span className={styles.tag_text}>{tag}</span>\n        <span\n          className={styles.tag_close}\n          onClick={() => props.onDeleteHandler(idx)}\n        >\n          &times;\n        </span>\n      </li>\n    )\n  })\n\n  const handleValueChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const t = e.target.value\n    setNewTag(t)\n    setTypedTag(t)\n    props.onChangeHandler && props.onChangeHandler(t)\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    let delimiters: string[] = props.delimeters\n      ? props.delimeters\n      : [',', 'Enter']\n    if (delimiters.includes(e.key) && newTag !== '') {\n      e.preventDefault()\n      props.onAddHandler(newTag)\n      setNewTag('')\n    } else {\n      const s = selectedAutoSuggestIndex\n\n      if (e.key === 'ArrowUp') {\n        if (s === -1) {\n          setSelectedAutoSuggestIndex(props.suggestions.length - 1)\n          setNewTag(props.suggestions[props.suggestions.length - 1])\n        } else if (s === 0) {\n          setSelectedAutoSuggestIndex(-1)\n          setNewTag(typedTag)\n        } else {\n          setSelectedAutoSuggestIndex(s - 1)\n          setNewTag(props.suggestions[s - 1])\n        }\n      } else if (e.key === 'ArrowDown') {\n        if (s === props.suggestions.length - 1) {\n          setSelectedAutoSuggestIndex(-1)\n          setNewTag(typedTag)\n        } else {\n          setSelectedAutoSuggestIndex(s + 1)\n          setNewTag(props.suggestions[s + 1])\n        }\n      }\n    }\n  }\n\n  const autoSuggestionContainer = props.suggestions.length ? (\n    <div className={styles.tag_autosuggestions}>\n      <ul>{TagAutoSuggestions}</ul>\n    </div>\n  ) : null\n\n  const selectedTagContainer = props.tags.length ? (\n    <div className={styles.selected_tags}>\n      <ul className={styles.selected_tag_list}>{SelectedTags}</ul>\n    </div>\n  ) : null\n\n  const tagInput = (\n    <input\n      type='text'\n      className={styles.tag_input}\n      placeholder={props.placeholder ? props.placeholder : 'Enter a tag'}\n      value={newTag}\n      onChange={(e) => handleValueChange(e)}\n      onKeyDown={(e) => handleKeyPress(e)}\n    />\n  )\n  return (\n    <div className={styles.autocomplete_tag}>\n      <div className={styles.tag_container}>\n        {selectedTagContainer}\n        {tagInput}\n      </div>\n      {autoSuggestionContainer}\n    </div>\n  )\n}\nexport default ReactTags\n","import React, { useState } from 'react'\n\nimport ReactTags from 'react-autocomplete-tag'\nimport 'react-autocomplete-tag/dist/index.css'\n\nconst App = () => {\n  const tagList: string[] = [\n    'America',\n    'Argentina',\n    'Africa',\n    'Bangladesh',\n    'Burma',\n    'China',\n    'Chili',\n    'Denmark',\n    'Dhaka'\n  ]\n  var [tags, setTags] = useState<string[]>([])\n\n  const [suggestions, setSuggestions] = useState<string[]>([])\n\n  const addTag = (val: string) => {\n    setTags([...tags, val])\n    setSuggestions([])\n  }\n\n  const removeTag = (idx: number) => {\n    var t = [...tags]\n    t.splice(idx, 1)\n    setTags(t)\n  }\n\n  const handleTagChange = (val: string) => {\n    if (val.length > 0) {\n      var new_sug: string[] = []\n      tagList.forEach((t) => {\n        if (t.includes(val)) {\n          new_sug.push(t)\n        }\n      })\n      setSuggestions(new_sug)\n    } else {\n      setSuggestions([])\n    }\n  }\n\n  return (\n    <ReactTags\n      tags={tags}\n      suggestions={suggestions}\n      onAddHandler={(val: string) => addTag(val)}\n      onDeleteHandler={(idx: number) => removeTag(idx)}\n      onChangeHandler={(val: string) => handleTagChange(val)}\n    />\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}